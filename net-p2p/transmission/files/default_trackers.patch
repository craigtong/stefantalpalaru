diff --git a/daemon/daemon.c b/daemon/daemon.c
index 96a56cdee..190609a8f 100644
--- a/daemon/daemon.c
+++ b/daemon/daemon.c
@@ -99,6 +99,7 @@ static const struct tr_option options[] =
     { 'C', "no-watch-dir", "Disable the watch-dir", "C", 0, NULL },
     { 941, "incomplete-dir", "Where to store new torrents until they're complete", NULL, 1, "<directory>" },
     { 942, "no-incomplete-dir", "Don't store incomplete torrents in a different location", NULL, 0, NULL },
+    { 943, "default-trackers", "Default trackers to be automatically added to public torrents", NULL, 1, "<list>" },
     { 'd', "dump-settings", "Dump the settings and exit", "d", 0, NULL },
     { 'e', "logfile", "Dump the log messages to this filename", "e", 1, "<filename>" },
     { 'f', "foreground", "Run in the foreground instead of daemonizing", "f", 0, NULL },
@@ -360,6 +361,8 @@ parse_args (int           argc,
                       break;
             case 942: tr_variantDictAddBool (settings, TR_KEY_incomplete_dir_enabled, false);
                       break;
+            case 943: tr_variantDictAddStr  (settings, TR_KEY_default_trackers, optarg);
+                      break;
             case 'd': *dump_settings = true;
                       break;
             case 'e': if (reopen_log_file (optarg))
diff --git a/libtransmission/quark.c b/libtransmission/quark.c
index 21b577482..43861ecb8 100644
--- a/libtransmission/quark.c
+++ b/libtransmission/quark.c
@@ -77,6 +77,7 @@ static const struct tr_key_struct my_static[] =
   { "current-stats", 13 },
   { "date", 4 },
   { "dateCreated", 11 },
+  { "default-trackers", 16 },
   { "delete-local-data", 17 },
   { "desiredAvailable", 16 },
   { "destination", 11 },
diff --git a/libtransmission/quark.h b/libtransmission/quark.h
index cbbc9d8a5..f31697493 100644
--- a/libtransmission/quark.h
+++ b/libtransmission/quark.h
@@ -78,6 +78,7 @@ enum
   TR_KEY_current_stats,
   TR_KEY_date,
   TR_KEY_dateCreated,
+  TR_KEY_default_trackers,
   TR_KEY_delete_local_data,
   TR_KEY_desiredAvailable,
   TR_KEY_destination,
diff --git a/libtransmission/session.c b/libtransmission/session.c
index c25b90f50..77fa1a4af 100644
--- a/libtransmission/session.c
+++ b/libtransmission/session.c
@@ -324,6 +324,7 @@ tr_sessionGetDefaultSettings (tr_variant * d)
   tr_variantDictAddBool (d, TR_KEY_dht_enabled,                     true);
   tr_variantDictAddBool (d, TR_KEY_utp_enabled,                     true);
   tr_variantDictAddBool (d, TR_KEY_lpd_enabled,                     false);
+  tr_variantDictAddStr  (d, TR_KEY_default_trackers,                "");
   tr_variantDictAddStr  (d, TR_KEY_download_dir,                    tr_getDefaultDownloadDir ());
   tr_variantDictAddInt  (d, TR_KEY_speed_limit_down,                100);
   tr_variantDictAddBool (d, TR_KEY_speed_limit_down_enabled,        false);
@@ -392,6 +393,7 @@ tr_sessionGetSettings (tr_session * s, tr_variant * d)
   tr_variantDictAddBool (d, TR_KEY_blocklist_enabled,            tr_blocklistIsEnabled (s));
   tr_variantDictAddStr  (d, TR_KEY_blocklist_url,                tr_blocklistGetURL (s));
   tr_variantDictAddInt  (d, TR_KEY_cache_size_mb,                tr_sessionGetCacheLimit_MB (s));
+  tr_variantDictAddStr  (d, TR_KEY_default_trackers,             tr_sessionGetDefaultTrackers (s));
   tr_variantDictAddBool (d, TR_KEY_dht_enabled,                  s->isDHTEnabled);
   tr_variantDictAddBool (d, TR_KEY_utp_enabled,                  s->isUTPEnabled);
   tr_variantDictAddBool (d, TR_KEY_lpd_enabled,                  s->isLPDEnabled);
@@ -786,6 +788,8 @@ sessionSetImpl (void * vdata)
   /* misc features */
   if (tr_variantDictFindInt (settings, TR_KEY_cache_size_mb, &i))
     tr_sessionSetCacheLimit_MB (session, i);
+  if (tr_variantDictFindStr (settings, TR_KEY_default_trackers, &str, NULL))
+    tr_sessionSetDefaultTrackers (session, str);
   if (tr_variantDictFindInt (settings, TR_KEY_peer_limit_per_torrent, &i))
     tr_sessionSetPeerLimitPerTorrent (session, i);
   if (tr_variantDictFindBool (settings, TR_KEY_pex_enabled, &boolVal))
@@ -2226,6 +2230,50 @@ tr_sessionGetCacheLimit_MB (const tr_session * session)
 ****
 ***/
 
+void
+tr_sessionSetDefaultTrackers (tr_session * session, const char * defaultTrackersStr)
+{
+  void * tmp;
+  const char * walk;
+
+  assert (tr_isSession (session));
+
+  /* keep the string */
+  tmp = session->defaultTrackersStr;
+  session->defaultTrackersStr = tr_strdup (defaultTrackersStr);
+  tr_free (tmp);
+
+  /* clear out the old list entries */
+  while ((tmp = tr_list_pop_front (&session->defaultTrackers)))
+    tr_free (tmp);
+
+  /* build the new list entries */
+  for (walk=defaultTrackersStr; walk && *walk;)
+    {
+      const char * delimiters = " ,;";
+      const size_t len = strcspn (walk, delimiters);
+      char * token = tr_strndup (walk, len);
+      tr_list_append (&session->defaultTrackers, token);
+
+      if (walk[len]=='\0')
+        break;
+
+      walk += len + 1;
+    }
+}
+
+const char*
+tr_sessionGetDefaultTrackers (const tr_session * session)
+{
+  assert (tr_isSession (session));
+
+  return session->defaultTrackersStr ? session->defaultTrackersStr : "";
+}
+
+/***
+****
+***/
+
 struct port_forwarding_data
 {
   bool enabled;
diff --git a/libtransmission/session.h b/libtransmission/session.h
index b0e9af527..e5bdc1317 100644
--- a/libtransmission/session.h
+++ b/libtransmission/session.h
@@ -220,6 +220,9 @@ struct tr_session
 
     struct tr_bindinfo         * public_ipv4;
     struct tr_bindinfo         * public_ipv6;
+
+    struct tr_list             * defaultTrackers;
+    char                       * defaultTrackersStr;
 };
 
 static inline tr_port
@@ -326,3 +329,6 @@ void tr_sessionGetNextQueuedTorrents (tr_session   * session,
 
 int tr_sessionCountQueueFreeSlots (tr_session * session, tr_direction);
 
+void tr_sessionSetDefaultTrackers (tr_session * session, const char * defaultTrackersStr);
+const char* tr_sessionGetDefaultTrackers (const tr_session * session);
+
diff --git a/libtransmission/torrent.c b/libtransmission/torrent.c
index c2890cfbb..8357fbb56 100644
--- a/libtransmission/torrent.c
+++ b/libtransmission/torrent.c
@@ -35,6 +35,7 @@
 #include "fdlimit.h" /* tr_fdTorrentClose */
 #include "file.h"
 #include "inout.h" /* tr_ioTestPiece () */
+#include "list.h"
 #include "log.h"
 #include "magnet.h"
 #include "metainfo.h"
@@ -1029,6 +1030,65 @@ torrentParseImpl (const tr_ctor  * ctor,
   return result;
 }
 
+static void
+tr_torrentAddDefaultTrackers(tr_torrent * tor)
+{
+  tr_list * l;
+  int tier = -1;
+  int i;
+  tr_tracker_info * trackers;
+  int numExistingTrackers = tor->info.trackerCount;
+  int numNewTrackers = tr_list_size (tor->session->defaultTrackers);
+  char * url;
+  bool duplicate;
+  bool changed = false;
+
+  if (!numNewTrackers)
+      return;
+
+  // copy existing trackers
+  trackers = tr_new0 (tr_tracker_info, numExistingTrackers + numNewTrackers);
+  for (i=0; i<numExistingTrackers; ++i)
+    {
+      trackers[i].tier = tor->info.trackers[i].tier;
+      trackers[i].announce = tr_strdup (tor->info.trackers[i].announce);
+      tier = MAX (tier, tor->info.trackers[i].tier);
+    }
+
+  // add the new ones
+  for (l=tor->session->defaultTrackers; l!=NULL; l=l->next)
+    {
+      url = (char *)l->data;
+      if (tr_urlIsValidTracker (url))
+        {
+          // check for duplicates
+          duplicate = false;
+          for (i=0; i<numExistingTrackers; ++i)
+            {
+              if (strcmp (trackers[i].announce, url) == 0)
+                {
+                  duplicate = true;
+                  break;
+                }
+            }
+          if (duplicate)
+            continue;
+          trackers[numExistingTrackers].tier = ++tier; /* add a new tier */
+          trackers[numExistingTrackers].announce = tr_strdup (url);
+          ++numExistingTrackers;
+          changed = true;
+        }
+    }
+
+  if (changed)
+    tr_torrentSetAnnounceList (tor, trackers, numExistingTrackers);
+
+  for (i=0; i<numExistingTrackers; ++i)
+    tr_free (trackers[i].announce);
+
+  tr_free (trackers);
+}
+
 tr_parse_result
 tr_torrentParse (const tr_ctor * ctor, tr_info * setmeInfo)
 {
@@ -1040,12 +1100,14 @@ tr_torrentNew (const tr_ctor * ctor, int * setme_error, int * setme_duplicate_id
 {
   size_t len;
   bool hasInfo;
+  bool isPrivate = false;
   tr_info tmpInfo;
   tr_parse_result r;
   tr_torrent * tor = NULL;
+  tr_session * session = tr_ctorGetSession (ctor);
 
   assert (ctor != NULL);
-  assert (tr_isSession (tr_ctorGetSession (ctor)));
+  assert (tr_isSession (session));
 
   r = torrentParseImpl (ctor, &tmpInfo, &hasInfo, &len, setme_duplicate_id);
   if (r == TR_PARSE_OK)
@@ -1054,9 +1116,17 @@ tr_torrentNew (const tr_ctor * ctor, int * setme_error, int * setme_duplicate_id
       tor->info = tmpInfo;
 
       if (hasInfo)
-        tor->infoDictLength = len;
+        {
+          tor->infoDictLength = len;
+          isPrivate = tor->info.isPrivate;
+        }
 
       torrentInit (tor, ctor);
+
+      if (!isPrivate)
+        {
+          tr_torrentAddDefaultTrackers (tor);
+        }
     }
   else
     {
